-- Fisch Auto Reel Script with Lag Reduction, UI Toggle, Dropdown Mode, Hide/Show, Draggable (Mobile) & Anti-Exploit (2025)
-- Features: Auto Reel (Legit/Blatant), Random Miss 1.7-2.6s (Legit), UI Toggle, Dropdown Mode, Hide/Show UI, Draggable UI (Touch), Anti-Exploit

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local player = Players.LocalPlayer

local enabled = false
local reeling = false
local autoReelConnection
local frameCounter = 0
local uiVisible = true
local reelMode = "Legit" -- Default mode
local cachedReel, cachedPlayerbar, cachedFish = nil, nil, nil

-- Create UI Toggle, Dropdown, Hide/Show
local function createToggleUI()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "UI_" .. math.random(1000, 9999)
    screenGui.Parent = player.PlayerGui
    screenGui.ResetOnSpawn = false

    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 200, 0, 120)
    frame.Position = UDim2.new(0.5, -100, 0.1, 0)
    frame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    frame.BorderSizePixel = 0
    frame.Parent = screenGui
    frame.Active = true

    local toggleButton = Instance.new("TextButton")
    toggleButton.Size = UDim2.new(0, 120, 0, 40)
    toggleButton.Position = UDim2.new(0.5, -60, 0.2, 0)
    toggleButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    toggleButton.Text = "Toggle OFF"
    toggleButton.TextScaled = true
    toggleButton.Parent = frame

    local modeLabel = Instance.new("TextLabel")
    modeLabel.Size = UDim2.new(0, 160, 0, 20)
    modeLabel.Position = UDim2.new(0.5, -80, 0.5, -5)
    modeLabel.BackgroundTransparency = 1
    modeLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    modeLabel.Text = "Mode: " .. reelMode
    modeLabel.TextScaled = true
    modeLabel.Parent = frame

    local modeButton = Instance.new("TextButton")
    modeButton.Size = UDim2.new(0, 120, 0, 40)
    modeButton.Position = UDim2.new(0.5, -60, 0.7, -5)
    modeButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    modeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    modeButton.Text = "Switch Mode"
    modeButton.TextScaled = true
    modeButton.Parent = frame

    local hideButton = Instance.new("TextButton")
    hideButton.Size = UDim2.new(0, 50, 0, 50)
    hideButton.Position = UDim2.new(1, -60, 0, 5)
    hideButton.BackgroundColor3 = Color3.fromRGB(150, 50, 50)
    hideButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    hideButton.Text = "X"
    hideButton.TextScaled = true
    hideButton.Parent = frame

    local uicorner = Instance.new("UICorner")
    uicorner.CornerRadius = UDim.new(0, 8)
    uicorner.Parent = toggleButton
    uicorner:Clone().Parent = frame
    uicorner:Clone().Parent = modeButton
    uicorner:Clone().Parent = hideButton

    -- Handle mode switch
    modeButton.MouseButton1Click:Connect(function()
        reelMode = (reelMode == "Legit") and "Blatant" or "Legit"
        modeLabel.Text = "Mode: " .. reelMode
        print("Switched to " .. reelMode .. " mode")
    end)

    -- Handle hide/show
    hideButton.MouseButton1Click:Connect(function()
        uiVisible = not uiVisible
        frame.Visible = uiVisible
        hideButton.Text = uiVisible and "X" or "O"
    end)

    -- Handle dragging (Touch)
    local dragging = false
    local dragStart = nil
    local startPos = nil
    local lastTouchTime = 0

    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.Touch then
            local currentTime = tick()
            if currentTime - lastTouchTime > 0.1 then -- Debounce touch
                dragging = true
                dragStart = input.Position
                startPos = frame.Position
                lastTouchTime = currentTime
            end
        end
    end)

    frame.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.Touch then
            local delta = input.Position - dragStart
            frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)

    frame.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.Touch then
            dragging = false
        end
    end)

    return toggleButton, frame
end

-- Dynamic GUI path finder with debug
local function findReelComponents()
    local reel = player.PlayerGui:FindFirstChild("reel")
    if not reel then
        return nil, nil, nil
    end
    local bar = reel:FindFirstChild("bar")
    local playerbar = bar and bar:FindFirstChild("playerbar")
    local fish = bar and bar:FindFirstChild("fish")
    if playerbar and fish then
        return reel, playerbar, fish
    end
    return nil, nil, nil
end

-- Auto Reel function (Legit)
local function autoReel(playerbar, fish)
    if playerbar and fish then
        playerbar.Position = fish.Position
    end
end

-- No Perfect function (Legit)
local function noperfect(playerbar)
    if playerbar then
        playerbar.Position = UDim2.new(0, 0, -35, 0)
        task.wait(0.2)
    end
end

-- Start Auto Reel
local function startAutoReel()
    if reeling or not enabled then return end
    cachedReel, cachedPlayerbar, cachedFish = findReelComponents()
    if not (cachedReel and cachedPlayerbar and cachedFish) then return end

    if reelMode == "Legit" then
        noperfect(cachedPlayerbar)
        task.wait(math.random(1700, 2600) / 1000) -- Random miss
        reeling = true
        autoReelConnection = RunService.Heartbeat:Connect(function()
            frameCounter = frameCounter + 1
            if frameCounter % 3 == 0 then -- Fixed frame skip
                autoReel(cachedPlayerbar, cachedFish)
            end
        end)
    elseif reelMode == "Blatant" then
        reeling = true
        task.spawn(function()
            task.wait(0.1) -- Small delay to avoid spam
            pcall(function()
                cachedPlayerbar:GetPropertyChangedSignal("Position"):Wait()
                local events = ReplicatedStorage:FindFirstChild("events")
                if events then
                    local reelfinished = events:FindFirstChild("reelfinished")
                    if reelfinished then
                        reelfinished:FireServer(100, false)
                    end
                end
            end)
            reeling = false
        end)
    end
end

-- Stop Auto Reel
local function stopAutoReel()
    if autoReelConnection then
        autoReelConnection:Disconnect()
        autoReelConnection = nil
    end
    reeling = false
    cachedReel, cachedPlayerbar, cachedFish = nil, nil, nil
end

-- Toggle script
local function toggleScript(button)
    enabled = not enabled
    button.Text = enabled and "Toggle ON" or "Toggle OFF"
    button.BackgroundColor3 = enabled and Color3.fromRGB(0, 200, 0) or Color3.fromRGB(100, 100, 100)
    
    if enabled then
        startAutoReel()
    else
        stopAutoReel()
    end
end

-- Monitor reel GUI
player.PlayerGui.DescendantAdded:Connect(function(descendant)
    if enabled and descendant.Name == "playerbar" and descendant.Parent and descendant.Parent.Name == "bar" then
        startAutoReel()
    end
end)

player.PlayerGui.DescendantRemoving:Connect(function(descendant)
    if descendant.Name == "playerbar" and descendant.Parent and descendant.Parent.Name == "bar" then
        stopAutoReel()
    end
end)

-- Initialize UI
local toggleButton, frame = createToggleUI()
toggleButton.MouseButton1Click:Connect(function()
    toggleScript(toggleButton)
end)

-- Check initial reel state
if player.PlayerGui:FindFirstChild("reel") and 
   player.PlayerGui.reel:FindFirstChild("bar") and 
   player.PlayerGui.reel.bar:FindFirstChild("playerbar") then
    if enabled then
        startAutoReel()
    end
end

print("Fisch Auto Reel (Lag Reduced) with UI Toggle, Dropdown Mode, Hide/Show, Draggable (Mobile) & Anti-Exploit Loaded!")
