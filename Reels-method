local success, redzlib = pcall(function()
    return loadstring(game:HttpGet("https://gist.githubusercontent.com/MjContiga1/54c07e52fc2aab8873b68d91a71d11c6/raw/fb4f1d6a7c89465f3b39bc00eeff09af24b88f20/Redz%2520hub.lua"))()
end)
if not success then
    warn("Failed to load redzlib: " .. tostring(redzlib))
    return
end

-- Create window
local Window = redzlib:MakeWindow({
    Title = "Fisch Auto Reel",
    SubTitle = "Make For Lazy Fisher",
    SaveFolder = "FischSettings"
})

-- Check if the new image asset loads
local newImageId = "rbxassetid://135322148494327"
local fallbackImageId = "rbxassetid://139438145143663"
local imageId = newImageId
local success, err = pcall(function()
    game:GetService("ContentProvider"):PreloadAsync({newImageId})
end)
if not success then
    warn("Failed to load image " .. newImageId .. ": " .. tostring(err))
    imageId = fallbackImageId
end

-- Add minimize button (square with rounded corners)
Window:AddMinimizeButton({
    Button = { 
        Image = imageId, 
        BackgroundTransparency = 0,
        Size = UDim2.new(0, 44, 0, 44)
    },
    Corner = { CornerRadius = UDim.new(0, 8) }
})

-- Create tabs
local MainTab = Window:MakeTab({"Main", "rbxassetid://7733960981"})
local InstantTab = Window:MakeTab({"Instant Tab", "rbxassetid://10734962600"})
local MiscTab = Window:MakeTab({"Misc", "rbxassetid://10747376565"})
local TeleportsTab = Window:MakeTab({"Teleports", "rbxassetid://10747373176"})
Window:SelectTab(MainTab)

-- Add section for Main Tab
local MainSection = MainTab:AddSection({"Fisch Auto Reel"})
local InstantSection = InstantTab:AddSection({"Instant Reel"})
local MiscSection = MiscTab:AddSection({"Settings"})
local TeleportsSection = TeleportsTab:AddSection({"Teleport Locations"})

-- Initialize services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local GuiService = game:GetService("GuiService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

-- Variables
local autoreel = false
local normalmode = false
local smoothness = "Medium"
local autocast = false
local autoCastMode = "Normal"
local autoreel_running = false
local normalmode_running = false
local autocast_running = false
local autoShakeEnabled = false
local ShakeMode = "Navigation"
local autoShakeConnection
local instantreel = false
local instantReelMode = "Normal"
local instantreel_running = false
local language = "English"
local selectedTeleport = nil

-- Teleport locations
local teleportLocations = {
    ["Abyssal Zenith - MAIN"] = Vector3.new(-13486.57, -11048.69, 147.35),
    ["Acient Island - MAIN"] = Vector3.new(6068.83, 195.16, 287.13),
    ["Altar - MAIN"] = Vector3.new(22.74, 159.01, -1037.92),
    ["Atlantean Storm - MAIN"] = Vector3.new(-3593, 153, 512),
    ["Atlantis - MAIN"] = Vector3.new(-4331, -603, 1822),
    ["Blue Moon - MAIN"] = Vector3.new(2695, 131, 2586),
    ["Brine Pool - AURORA TOTEM"] = Vector3.new(-1810, -136, -3280),
    ["Brine Pool - MAIN"] = Vector3.new(-1795, -142, -3397),
    ["Calm Zone - MAIN 1"] = Vector3.new(-4256.21, -11200.71, 1783.91),
    ["Calm Zone - MAIN 2"] = Vector3.new(-4362.04, -11175.49, 3708.89),
    ["Carrot Island - MAIN"] = Vector3.new(3725.78589, -1130.48267, -1069.81592),
    ["Castaway - CAVE"] = Vector3.new(462, 203, -1959),
    ["Castaway - MAIN"] = Vector3.new(397, 199, -1802),
    ["Castaway - RED MARLIN"] = Vector3.new(528, 309, -2032),
    ["Challenger's Deep - BLACK MARKET"] = Vector3.new(-978, -244, -2700),
    ["Challenger's Deep - MAIN"] = Vector3.new(-1658, -214, -2843),
    ["Crimson Cavern - MAIN"] = Vector3.new(-1073, -353, -4873),
    ["Forsaken Shore - MAIN"] = Vector3.new(-2494.16, 133.25, 1558.86),
    ["Grand Reef - MAIN"] = Vector3.new(-3576.43, 151.08, 523.13),
    ["Keepers Altar - ALTAR"] = Vector3.new(1310.73328, -808.551941, -103.468826),
    ["Moosewood - MAIN"] = Vector3.new(403.19, 134.00, 236.28),
    ["Mushgrove Swamp - MAIN"] = Vector3.new(2449.24, 130.86, -667.88),
    ["Northern Summit - CAVE"] = Vector3.new(20049.27, 512.40, 5428.28),
    ["Northern Summit - GEM 1"] = Vector3.new(20130.38, 208.37, 5429.69),
    ["Northern Summit - MAIN"] = Vector3.new(19550.66, 132.67, 5300.76),
    ["Overgrowth Caves - CAVE"] = Vector3.new(20049.27, 512.40, 5428.28),
    ["Overgrowth Caves - GEM 2"] = Vector3.new(19881.36, 448.09, 5559.87),
    ["Overgrowth Caves - MAIN"] = Vector3.new(19835.89, 439.61, 5615.26),
    ["Roslit Bay - MAIN"] = Vector3.new(-1465.14, 133.22, 679.52),
    ["Roslit Bay - VOLCANO"] = Vector3.new(-1958.76, 192.48, 265.41),
    ["SnowCap - MAIN"] = Vector3.new(2684.61, 152.58, 2392.01),
    ["SunStone - CAVE"] = Vector3.new(-1146.59, 134.50, -1065.05),
    ["SunStone - MAIN"] = Vector3.new(-928.98, 131.54, -1114.39),
    ["SunStone - MERLIN"] = Vector3.new(-932.16, 223.78, -988.99),
    ["Veil of the Forsaken - MAIN"] = Vector3.new(-4348.36, -11183.62, 7075.06),
    ["Volcanic Vents - MAIN"] = Vector3.new(-3503.68, -2257.55, 3847.52)
}

-- Language translations
local languageTranslations = {
    ["English"] = {
        mainTab = {
            autoReel = "Auto Reel (Legit)",
            autoReelNormal = "Auto Reel (Normal)",
            autoCast = "Auto Cast",
            autoCastMode = "Auto Cast Mode",
            autoShake = "Auto Shake",
            shakeMode = "Shake Mode",
            smoothness = "Smoothness",
            instantReelButton = "Instant Reel",
            instantReelPerfectButton = "Instant Reel Perfect"
        },
        instantTab = {
            instantReel = "Instant Reel",
            instantReelMode = "Instant Reel Mode"
        },
        miscTab = {
            language = "Language"
        },
        options = {
            autoCastMode = {Normal = "Normal", Max = "Max"},
            smoothness = {Slow = "Slow", Medium = "Medium", Fast = "Fast"},
            instantReelMode = {Normal = "Normal", Perfect = "Perfect"},
            shakeMode = {Navigation = "Navigation"},
            language = {Thai = "ไทย", English = "English"}
        }
    },
    ["ไทย"] = {
        mainTab = {
            autoReel = "ตามปลา(โหมดปกติ)",
            autoReelNormal = "ตามปลา(โหมดปรับความเร็วได้)",
            autoCast = "โยนเบ็ดออโต้",
            autoCastMode = "เลือกโหมดโยน",
            autoShake = "กดเขย่าปลาออโต้",
            shakeMode = "ความเร็วตามปลา(โหมดปรับความเร็ว)",
            smoothness = "ความเร็วตามปลา(โหมดปรับความเร็ว)",
            instantReelButton = "ดึงปลาทันที",
            instantReelPerfectButton = "ดึงปลาทันที(แบบติดเพอร์เฟคแคท)"
        },
        instantTab = {
            instantReel = "ตามปลา แล้วดึงทันที",
            instantReelMode = "โหมดดึงปลา"
        },
        miscTab = {
            language = "เปลี่ยนภาษา"
        },
        options = {
            autoCastMode = {Normal = "สุ่ม", Max = "เพอร์เฟค"},
            smoothness = {Slow = "ช้า", Medium = "ปานกลาง", Fast = "เร็ว"},
            instantReelMode = {Normal = "ไม่เพอร์เฟค", Perfect = "ติดเพอร์เฟค"},
            shakeMode = {Navigation = "Navigation"},
            language = {Thai = "ไทย", English = "English"}
        }
    }
}

-- Function to update language
local function updateLanguage()
    local trans = languageTranslations[language]
    
    -- Update Main Tab
    for _, obj in pairs(MainTab.Objects) do
        if obj.Type == "Toggle" then
            if obj.Flag == "AutoReel" then obj:SetName(trans.mainTab.autoReel)
            elseif obj.Flag == "NormalMode" then obj:SetName(trans.mainTab.autoReelNormal)
            elseif obj.Flag == "AutoCast" then obj:SetName(trans.mainTab.autoCast)
            elseif obj.Flag == "AutoShake" then obj:SetName(trans.mainTab.autoShake) end
        elseif obj.Type == "Dropdown" then
            if obj.Name == "Auto Cast Mode" or obj.Name == trans.mainTab.autoCastMode then obj:SetName(trans.mainTab.autoCastMode)
            elseif obj.Name == "Shake Mode" or obj.Name == trans.mainTab.shakeMode then obj:SetName(trans.mainTab.shakeMode)
            elseif obj.Name == "Smoothness" or obj.Name == trans.mainTab.smoothness then obj:SetName(trans.mainTab.smoothness) end
            if obj.Name == trans.mainTab.autoCastMode then obj:SetOptions({trans.options.autoCastMode.Normal, trans.options.autoCastMode.Max})
            elseif obj.Name == trans.mainTab.smoothness then obj:SetOptions({trans.options.smoothness.Slow, trans.options.smoothness.Medium, trans.options.smoothness.Fast})
            elseif obj.Name == trans.mainTab.shakeMode then obj:SetOptions({trans.options.shakeMode.Navigation}) end
        elseif obj.Type == "Button" then
            if obj.Name == "Instant Reel" then obj:SetName(trans.mainTab.instantReelButton)
            elseif obj.Name == "Instant Reel Perfect" then obj:SetName(trans.mainTab.instantReelPerfectButton) end
        end
    end
    
    -- Update Instant Tab
    for _, obj in pairs(InstantTab.Objects) do
        if obj.Type == "Toggle" then
            if obj.Flag == "InstantReel" then obj:SetName(trans.instantTab.instantReel) end
        elseif obj.Type == "Dropdown" then
            if obj.Name == "Instant Reel Mode" or obj.Name == trans.instantTab.instantReelMode then obj:SetName(trans.instantTab.instantReelMode)
            if obj.Name == trans.instantTab.instantReelMode then obj:SetOptions({trans.options.instantReelMode.Normal, trans.options.instantReelMode.Perfect}) end
        end
    end
    
    -- Update Misc Tab
    for _, obj in pairs(MiscTab.Objects) do
        if obj.Type == "Dropdown" then
            if obj.Name == "Language" or obj.Name == trans.miscTab.language then obj:SetName(trans.miscTab.language)
            if obj.Name == trans.miscTab.language then obj:SetOptions({trans.options.language.Thai, trans.options.language.English}) end
        end
    end
end

-- Get HumanoidRootPart
local function GetHumanoidRootPart()
    local char = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    return char:WaitForChild("HumanoidRootPart")
end

-- Linear interpolation for smooth movement
local function lerp(a, b, t)
    return a + (b - a) * t
end

-- Get smoothness value for Auto Reel (Legit)
local function getSmoothnessValue()
    if smoothness == "Slow" then
        return 0.15
    elseif smoothness == "Fast" then
        return 0.25
    else -- Medium
        return 0.2
    end
end

-- Get smoothness value for Auto Reel (Normal)
local function getSmoothnessValueNormal()
    if smoothness == "Slow" then
        return 0.25
    elseif smoothness == "Fast" then
        return 0.9
    else -- Medium
        return 0.6
    end
end

-- Auto Reel (Legit mode, continuous tracking)
local function StartAutoReel()
    if autoreel_running or normalmode_running or instantreel_running then return end
    autoreel_running = true
    task.defer(function()
        while autoreel do
            local gui = LocalPlayer:FindFirstChild("PlayerGui")
            local reel = gui and gui:FindFirstChild("reel")
            while autoreel and gui and not reel do
                reel = gui:FindFirstChild("reel")
                task.wait(0.1)
            end
            if reel then
                local char = LocalPlayer.Character
                if char then
                    for _, tool in ipairs(char:GetChildren()) do
                        if tool:IsA("Tool") then
                            while autoreel and reel and reel.Parent and tool.Parent == char do
                                local success, err = pcall(function()
                                    local bar = reel:FindFirstChild("bar")
                                    local fish = bar and bar:FindFirstChild("fish")
                                    local playerbar = bar and bar:FindFirstChild("playerbar")
                                    if fish and playerbar then
                                        local currentX = playerbar.Position.X.Scale
                                        local currentY = playerbar.Position.Y.Scale
                                        local lerpT = getSmoothnessValue()
                                        while autoreel and reel and reel.Parent and fish and playerbar and tool.Parent == char do
                                            local targetX = fish.Position.X.Scale + math.random(-0.005, 0.005)
                                            local targetY = fish.Position.Y.Scale + math.random(-0.005, 0.005)
                                            currentX = lerp(currentX, targetX, lerpT)
                                            currentY = lerp(currentY, targetY, lerpT)
                                            playerbar.Position = UDim2.new(currentX, 0, currentY, 0)
                                            task.wait(0.01)
                                            bar = reel:FindFirstChild("bar")
                                            fish = bar and bar:FindFirstChild("fish")
                                            playerbar = bar and bar:FindFirstChild("playerbar")
                                        end
                                    else
                                        warn("Reel UI elements not found")
                                    end
                                end)
                                if not success then
                                    warn("Error in AutoReel: " .. err)
                                    autoreel = false
                                    return
                                end
                                task.wait(0.1)
                            end
                        end
                    end
                end
            else
                warn("Reel UI not found")
            end
            task.wait(0.1)
        end
        autoreel_running = false
    end)
end

-- Auto Reel Normal (continuous tracking)
local function StartAutoReelNormal()
    if normalmode_running or autoreel_running or instantreel_running then return end
    normalmode_running = true
    task.defer(function()
        while normalmode do
            local gui = LocalPlayer:FindFirstChild("PlayerGui")
            local reel = gui and gui:FindFirstChild("reel")
            while normalmode and gui and not reel do
                reel = gui:FindFirstChild("reel")
                task.wait(0.1)
            end
            if reel then
                local char = LocalPlayer.Character
                if char then
                    for _, tool in ipairs(char:GetChildren()) do
                        if tool:IsA("Tool") then
                            while normalmode and reel and reel.Parent and tool.Parent == char do
                                local success, err = pcall(function()
                                    local bar = reel:FindFirstChild("bar")
                                    local fish = bar and bar:FindFirstChild("fish")
                                    local playerbar = bar and bar:FindFirstChild("playerbar")
                                    if fish and playerbar then
                                        local currentX = playerbar.Position.X.Scale
                                        local currentY = playerbar.Position.Y.Scale
                                        local lerpT = getSmoothnessValueNormal()
                                        while normalmode and reel and reel.Parent and fish and playerbar and tool.Parent == char do
                                            local targetX = fish.Position.X.Scale + math.random(-0.01, 0.01)
                                            local targetY = fish.Position.Y.Scale + math.random(-0.01, 0.01)
                                            currentX = lerp(currentX, targetX, lerpT)
                                            currentY = lerp(currentY, targetY, lerpT)
                                            playerbar.Position = UDim2.new(currentX, 0, currentY, 0)
                                            task.wait(0.01)
                                            bar = reel:FindFirstChild("bar")
                                            fish = bar and bar:FindFirstChild("fish")
                                            playerbar = bar and bar:FindFirstChild("playerbar")
                                        end
                                    else
                                        warn("Reel UI elements not found")
                                    end
                                end)
                                if not success then
                                    warn("Error in AutoReelNormal: " .. err)
                                    normalmode = false
                                    return
                                end
                                task.wait(0.1)
                            end
                        end
                    end
                end
            else
                warn("Reel UI not found")
            end
            task.wait(0.1)
        end
        normalmode_running = false
    end)
end

-- Auto Cast
local function StartAutoCast()
    if autocast_running then return end
    autocast_running = true
    task.defer(function()
        while autocast do
            local success, err = pcall(function()
                local char = LocalPlayer.Character
                if char then
                    for _, tool in ipairs(char:GetChildren()) do
                        if tool:IsA("Tool") and tool:FindFirstChild("events") and tool.events:FindFirstChild("castAsync") then
                            local gui = LocalPlayer:FindFirstChild("PlayerGui")
                            local reel = gui and gui:FindFirstChild("reel")
                            local bar = reel and reel:FindFirstChild("bar")
                            local fish = bar and bar:FindFirstChild("fish")
                            if not reel or not bar or not fish then
                                task.wait(1) -- Wait 1 second after fish bar disappears
                                local args = {
                                    [1] = autoCastMode == "Max" and 100 or math.random(10, 100),
                                    [2] = 1
                                }
                                tool.events.castAsync:InvokeServer(unpack(args))
                            end
                        else
                            warn("No valid rod with castAsync event found")
                        end
                    end
                else
                    warn("Character not found")
                end
            end)
            if not success then
                warn("Error in AutoCast: " .. err)
                autocast = false
                autocast_running = false
                return
            end
            task.wait(0.1)
        end
        autocast_running = false
    end)
end

-- Auto Shake
local function autoShake()
    if not autoShakeEnabled then return end
    local shakeui = PlayerGui:FindFirstChild("shakeui")
    if not shakeui then return end
    local safezone = shakeui:FindFirstChild("safezone")
    if not safezone then return end
    local button = safezone:FindFirstChild("button")
    if not button then return end

    if ShakeMode == "Navigation" then
        task.wait(0.2)
        if GuiService.SelectedObject ~= button then
            GuiService.SelectedObject = button
        end
        if GuiService.SelectedObject == button then
            VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Return, false, game)
            task.wait(0.1)
            VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Return, false, game)
            GuiService.SelectedObject = nil -- Ensure SelectedObject is cleared
        end
    end
end

local function startAutoShake()
    if autoShakeConnection or not autoShakeEnabled then return end
    autoShakeConnection = RunService.RenderStepped:Connect(function()
        autoShake()
    end)
end

local function stopAutoShake()
    if autoShakeConnection then
        autoShakeConnection:Disconnect()
        autoShakeConnection = nil
        GuiService.SelectedObject = nil -- Clear SelectedObject when stopping
    end
end

-- Auto Shake Triggers
PlayerGui.DescendantAdded:Connect(function(descendant)
    if autoShakeEnabled and descendant.Name == "button" and descendant.Parent and descendant.Parent.Name == "safezone" then
        startAutoShake()
    end
end)

PlayerGui.DescendantAdded:Connect(function(descendant)
    if descendant.Name == "playerbar" and descendant.Parent and descendant.Parent.Name == "bar" then
        stopAutoShake()
    end
end)

if autoShakeEnabled and PlayerGui:FindFirstChild("shakeui") and PlayerGui.shakeui:FindFirstChild("safezone") and PlayerGui.shakeui.safezone:FindFirstChild("button") then
    startAutoShake()
end

-- Instant Reel (for Instant Tab)
local function StartInstantReel()
    if instantreel_running or autoreel_running or normalmode_running then return end
    instantreel_running = true
    task.defer(function()
        while instantreel do
            local gui = LocalPlayer:FindFirstChild("PlayerGui")
            local reel = gui and gui:FindFirstChild("reel")
            while instantreel and gui and not reel do
                reel = gui:FindFirstChild("reel")
                task.wait(0.1)
            end
            if reel then
                local char = LocalPlayer.Character
                if char then
                    for _, tool in ipairs(char:GetChildren()) do
                        if tool:IsA("Tool") then
                            while instantreel and reel and reel.Parent and tool.Parent == char do
                                local success, err = pcall(function()
                                    local bar = reel:FindFirstChild("bar")
                                    local fish = bar and bar:FindFirstChild("fish")
                                    local playerbar = bar and bar:FindFirstChild("playerbar")
                                    if fish and playerbar then
                                        -- Trigger Instant Reel after 4.5 seconds
                                        task.spawn(function()
                                            task.wait(4.5)
                                            if instantreel and reel and reel.Parent and fish and playerbar and tool.Parent == char then
                                                local args = {
                                                    [1] = 100,
                                                    [2] = instantReelMode == "Perfect" and true or false
                                                }
                                                print("Firing reelfinished with args:", args[1], args[2])
                                                ReplicatedStorage.events.reelfinished:FireServer(unpack(args))
                                            end
                                        end)
                                        local currentX = playerbar.Position.X.Scale
                                        local currentY = playerbar.Position.Y.Scale
                                        local lerpT = 0.4 -- Fixed smoothness for Instant Reel
                                        while instantreel and reel and reel.Parent and fish and playerbar and tool.Parent == char do
                                            local targetX = fish.Position.X.Scale + math.random(-0.005, 0.005)
                                            local targetY = fish.Position.Y.Scale + math.random(-0.005, 0.005)
                                            currentX = lerp(currentX, targetX, lerpT)
                                            currentY = lerp(currentY, targetY, lerpT)
                                            playerbar.Position = UDim2.new(currentX, 0, currentY, 0)
                                            task.wait(0.01)
                                            bar = reel:FindFirstChild("bar")
                                            fish = bar and bar:FindFirstChild("fish")
                                            playerbar = bar and bar:FindFirstChild("playerbar")
                                        end
                                    else
                                        warn("Reel UI elements not found")
                                    end
                                end)
                                if not success then
                                    warn("Error in StartInstantReel: " .. err)
                                    instantreel = false
                                    return
                                end
                                task.wait(0.1)
                            end
                        end
                    end
                end
            else
                warn("Reel UI not found")
            end
            task.wait(0.1)
        end
        instantreel_running = false
    end)
end

-- Teleport function
local function teleportToLocation()
    if selectedTeleport and teleportLocations[selectedTeleport] then
        local character = LocalPlayer.Character
        if character and character:FindFirstChild("HumanoidRootPart") then
            character.HumanoidRootPart.CFrame = CFrame.new(teleportLocations[selectedTeleport])
            print("Teleported to " .. selectedTeleport)
        else
            warn("Character or HumanoidRootPart not found")
        end
    else
        warn("No teleport location selected")
    end
end

-- Auto Reel Toggle (Legit mode)
MainTab:AddToggle({
    Name = languageTranslations[language].mainTab.autoReel,
    Flag = "AutoReel",
    Default = autoreel,
    Callback = function(state)
        autoreel = state
        if state and (normalmode or instantreel) then
            normalmode = false
            instantreel = false
            normalmode_running = false
            instantreel_running = false
        end
        if state then
            local success, err = pcall(StartAutoReel)
            if not success then
                warn("Error in StartAutoReel: " .. err)
                autoreel = false
            end
        else
            autoreel_running = false
        end
    end
})

-- Auto Reel Normal Toggle
MainTab:AddToggle({
    Name = languageTranslations[language].mainTab.autoReelNormal,
    Flag = "NormalMode",
    Default = normalmode,
    Callback = function(state)
        normalmode = state
        if state and (autoreel or instantreel) then
            autoreel = false
            instantreel = false
            autoreel_running = false
            instantreel_running = false
        end
        if state then
            local success, err = pcall(StartAutoReelNormal)
            if not success then
                warn("Error in StartAutoReelNormal: " .. err)
                normalmode = false
            end
        else
            normalmode_running = false
        end
    end
})

-- Auto Cast Toggle
MainTab:AddToggle({
    Name = languageTranslations[language].mainTab.autoCast,
    Flag = "AutoCast",
    Default = autocast,
    Callback = function(state)
        autocast = state
        if state then
            local success, err = pcall(StartAutoCast)
            if not success then
                warn("Error in StartAutoCast: " .. err)
                autocast = false
            end
        else
            autocast_running = false
        end
    end
})

-- Auto Cast Mode Dropdown
MainTab:AddDropdown({
    Name = languageTranslations[language].mainTab.autoCastMode,
    Options = {languageTranslations[language].options.autoCastMode.Normal, languageTranslations[language].options.autoCastMode.Max},
    Default = autoCastMode,
    Callback = function(choice)
        autoCastMode = choice
    end
})

-- Auto Shake Toggle
MainTab:AddToggle({
    Name = languageTranslations[language].mainTab.autoShake,
    Flag = "AutoShake",
    Default = autoShakeEnabled,
    Callback = function(state)
        autoShakeEnabled = state
        if state then
            local success, err = pcall(startAutoShake)
            if not success then
                warn("Error in StartAutoShake: " .. err)
                autoShakeEnabled = false
            end
        else
            stopAutoShake()
        end
    end
})

-- Shake Mode Dropdown (Navigation only)
MainTab:AddDropdown({
    Name = languageTranslations[language].mainTab.shakeMode,
    Options = {languageTranslations[language].options.shakeMode.Navigation},
    Default = ShakeMode,
    Callback = function(choice)
        ShakeMode = choice
        if autoShakeEnabled then
            stopAutoShake()
            local success, err = pcall(startAutoShake)
            if not success then
                warn("Error restarting AutoShake: " .. err)
                autoShakeEnabled = false
            end
        end
    end
})

-- Smoothness Dropdown
MainTab:AddDropdown({
    Name = languageTranslations[language].mainTab.smoothness,
    Options = {languageTranslations[language].options.smoothness.Slow, languageTranslations[language].options.smoothness.Medium, languageTranslations[language].options.smoothness.Fast},
    Default = smoothness,
    Callback = function(choice)
        smoothness = choice
        if autoreel or normalmode then
            autoreel_running = false
            normalmode_running = false
            local success, err
            if autoreel then
                success, err = pcall(StartAutoReel)
            elseif normalmode then
                success, err = pcall(StartAutoReelNormal)
            end
            if not success then
                warn("Error restarting AutoReel: " .. err)
                autoreel = false
                normalmode = false
            end
        end
    end
})

-- Instant Reel Button
MainTab:AddButton({
    Name = languageTranslations[language].mainTab.instantReelButton,
    Callback = function()
        local args = {
            [1] = 100,
            [2] = false
        }
        print("Firing reelfinished with args:", args[1], args[2])
        ReplicatedStorage.events.reelfinished:FireServer(unpack(args))
    end
})

-- Instant Reel Perfect Button
MainTab:AddButton({
    Name = languageTranslations[language].mainTab.instantReelPerfectButton,
    Callback = function()
        local args = {
            [1] = 100,
            [2] = true
        }
        print("Firing reelfinished with args:", args[1], args[2])
        ReplicatedStorage.events.reelfinished:FireServer(unpack(args))
    end
})

-- Instant Reel Toggle (Instant Tab)
InstantTab:AddToggle({
    Name = languageTranslations[language].instantTab.instantReel,
    Flag = "InstantReel",
    Default = instantreel,
    Callback = function(state)
        instantreel = state
        if state and (autoreel or normalmode) then
            autoreel = false
            normalmode = false
            autoreel_running = false
            normalmode_running = false
        end
        if state then
            local success, err = pcall(StartInstantReel)
            if not success then
                warn("Error in StartInstantReel: " .. err)
                instantreel = false
            end
        else
            instantreel_running = false
        end
    end
})

-- Instant Reel Mode Dropdown
InstantTab:AddDropdown({
    Name = languageTranslations[language].instantTab.instantReelMode,
    Options = {languageTranslations[language].options.instantReelMode.Normal, languageTranslations[language].options.instantReelMode.Perfect},
    Default = instantReelMode,
    Callback = function(choice)
        instantReelMode = choice
    end
})

-- Language Dropdown (Misc Tab)
MiscTab:AddDropdown({
    Name = languageTranslations[language].miscTab.language,
    Options = {languageTranslations[language].options.language.Thai, languageTranslations[language].options.language.English},
    Default = language,
    Callback = function(choice)
        language = choice
        updateLanguage()
    end
})

-- Teleport Location Dropdown
TeleportsTab:AddDropdown({
    Name = "Teleport Location",
    Options = table.keys(teleportLocations),
    Default = nil,
    Callback = function(choice)
        selectedTeleport = choice
    end
})

-- Teleport Button
TeleportsTab:AddButton({
    Name = "Teleport",
    Callback = function()
        teleportToLocation()
    end
})

-- Initial language update
updateLanguage()
