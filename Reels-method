--[[
    WARNING: Heads up! This script has not been verified by ScriptBlox. Use at your own risk!
]]
local redzlib = loadstring(game:HttpGet("https://gist.githubusercontent.com/MjContiga1/54c07e52fc2aab8873b68d91a71d11c6/raw/fb4f1d6a7c89465f3b39bc00eeff09af24b88f20/Redz%2520hub.lua"))()

-- Create window
local Window = redzlib:MakeWindow({
    Title = "Fisch Auto Reel",
    SubTitle = "Legit Mode",
    SaveFolder = "FischSettings"
})

-- Add minimize button
Window:AddMinimizeButton({
    Button = { Image = "rbxassetid://139438145143663", BackgroundTransparency = 0 },
    Corner = { CornerRadius = UDim.new(35, 1) },
})

-- Create single tab
local MainTab = Window:MakeTab({"Main", "rbxassetid://7733960981"})
Window:SelectTab(MainTab)

-- Add section
local Section = MainTab:AddSection({"Fisch Auto Reel"})

-- Initialize services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local player = Players.LocalPlayer

-- Initialize settings
local SETTINGS_FILE = "Fischsv.json"
local Settings = {
    AutoReel = false
}

-- Load settings from file
if pcall(function() return readfile(SETTINGS_FILE) end) then
    local success, data = pcall(function()
        return HttpService:JSONDecode(readfile(SETTINGS_FILE))
    end)
    if success and data then
        for k, v in pairs(data) do
            Settings[k] = v
        end
    end
end

-- Variables
local autoreel = Settings.AutoReel
local autoreel_running = false

-- Save settings function
local function SaveSettings()
    pcall(function()
        local dataToSave = {}
        for k, v in pairs(Settings) do
            dataToSave[k] = v
        end
        writefile(SETTINGS_FILE, HttpService:JSONEncode(dataToSave))
        Window:Dialog({
            Title = "Settings",
            Text = "Settings saved successfully!",
            Options = {{"OK", function() end}}
        })
    end)
end

-- Get HumanoidRootPart
local function GetHumanoidRootPart()
    local char = player.Character or player.CharacterAdded:Wait()
    return char:WaitForChild("HumanoidRootPart")
end

-- Auto Reel (Legit mode only)
local function StartAutoReel()
    if autoreel_running then return end
    autoreel_running = true
    task.spawn(function()
        while autoreel do
            local gui = player:FindFirstChild("PlayerGui")
            local reel = gui and gui:FindFirstChild("reel")
            while autoreel and gui and not reel do
                reel = gui:FindFirstChild("reel")
                task.wait(0.1)
            end
            if reel then
                local char = player.Character
                if char then
                    for _, tool in ipairs(char:GetChildren()) do
                        if tool:IsA("Tool") and tool:FindFirstChild("events") and tool.events:FindFirstChild("reset") then
                            local resetEvent = tool.events.reset
                            local gameActive = true
                            while autoreel and reel and reel.Parent and tool.Parent == char and gameActive do
                                local success, err = pcall(function()
                                    resetEvent:FireServer()
                                    local bar = reel:FindFirstChild("bar")
                                    local fish = bar and bar:FindFirstChild("fish")
                                    local playerbar = bar and bar:FindFirstChild("playerbar")
                                    if fish and playerbar then
                                        -- Simulate legit reeling by aligning playerbar to fish
                                        playerbar.Position = UDim2.new(fish.Position.X.Scale, 0, fish.Position.Y.Scale, 0)
                                        -- Wait for minigame to complete (adjustable duration)
                                        for i = 1, 30 do -- Simulate 3 seconds of minigame (0.1s * 30)
                                            if not reel or not reel.Parent or not autoreel then
                                                gameActive = false
                                                break
                                            end
                                            task.wait(0.1)
                                        end
                                        if gameActive then
                                            -- Fire reelfinished after minigame completes
                                            local isPerfect = true -- Default to Perfect for simplicity
                                            ReplicatedStorage:WaitForChild("events"):WaitForChild("reelfinished"):FireServer(80, isPerfect)
                                        end
                                    else
                                        -- If UI elements are missing, stop minigame
                                        gameActive = false
                                        Window:Dialog({
                                            Title = "Warning",
                                            Text = "Reel UI not found! Ensure you're fishing.",
                                            Options = {{"OK", function() end}}
                                        })
                                    end
                                end)
                                if not success then
                                    warn("Error in AutoReel: " .. err)
                                    Window:Dialog({
                                        Title = "Error",
                                        Text = "Auto Reel failed: " .. err,
                                        Options = {{"OK", function() end}}
                                    })
                                    autoreel = false
                                    Settings.AutoReel = false
                                    SaveSettings()
                                    return
                                end
                                task.wait(0.05)
                            end
                            if tool.Parent ~= player.Backpack then
                                tool.Parent = player.Backpack
                            end
                        end
                    end
                end
            else
                Window:Dialog({
                    Title = "Warning",
                    Text = "Reel UI not found! Start fishing first.",
                    Options = {{"OK", function() end}}
                })
            end
            task.wait(0.1)
        end
        autoreel_running = false
    end)
end

-- Stop Auto Reel
local function StopAutoReel()
    autoreel_running = false
    warn("StopAutoReel called")
    Window:Dialog({
        Title = "Auto Reel",
        Text = "Auto Reel stopped",
        Options = {{"OK", function() end}}
    })
end

-- Auto Reel Toggle
MainTab:AddToggle({
    Name = "Auto Reel (Legit)",
    Flag = "AutoReel",
    Default = autoreel,
    Callback = function(state)
        autoreel = state
        Settings.AutoReel = state
        SaveSettings()
        if state then
            local success, err = pcall(StartAutoReel)
            if not success then
                warn("Error in StartAutoReel: " .. err)
                Window:Dialog({
                    Title = "Error",
                    Text = "Failed to start Auto Reel: " .. err,
                    Options = {{"OK", function() end}}
                })
                autoreel = false
                Settings.AutoReel = false
                SaveSettings()
            end
        else
            local success, err = pcall(StopAutoReel)
            if not success then
                warn("Error in StopAutoReel: " .. err)
            end
        end
    end
})
