-- Load redzlib
local redzlib
local success, result = pcall(function()
    return loadstring(game:HttpGet("https://gist.githubusercontent.com/MjContiga1/54c07e52fc2aab8873b68d91a71d11c6/raw/fb4f1d6a7c89465f3b39bc00eeff09af24b88f20/Redz%2520hub.lua"))()
end)
if not success then
    warn("Failed to load redzlib: " .. tostring(result))
    return
end
redzlib = result
print("redzlib loaded successfully")

-- Create window
local Window
local success, err = pcall(function()
    Window = redzlib:MakeWindow({
        Title = "Fisch Auto Reel",
        SubTitle = "Make For Lazy Fisher"
    })
end)
if not success then
    warn("Failed to create window: " .. err)
    return
end
print("Window created successfully")

-- Add minimize button
local success, err = pcall(function()
    Window:AddMinimizeButton({
        Button = { 
            Image = "rbxassetid://139438145143663", 
            BackgroundTransparency = 0 
        },
        Corner = { CornerRadius = UDim.new(35, 1) }
    })
end)
if not success then
    warn("Failed to add minimize button: " .. err)
end
print("Minimize button added")

-- Create tabs
local MainTab = Window:MakeTab({"Main", "rbxassetid://7733960981"})
local PlayerTab = Window:MakeTab({"Player", "rbxassetid://7743875962"})
local FastTab = Window:MakeTab({"Fast", "rbxassetid://7733960981"})
Window:SelectTab(MainTab)

-- Add sections
local MainSection = MainTab:AddSection({"Fisch Auto Reel"})
local PlayerSection = PlayerTab:AddSection({"Player Settings"})
local FastSection = FastTab:AddSection({"Fast Reel"})

-- Initialize services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local GuiService = game:GetService("GuiService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local player = Players.LocalPlayer

-- Initialize variables
local autoreel = false
local normalmode = false
local smoothness = "Medium"
local autoreel_fast = false
local instant_reel = false
local perfect_reel = false
local autocast = false
local autoshake = false
local autoreel_running = false
local normalmode_running = false
local autocast_coroutine = nil
local autoshake_connection = nil
local autoreel_coroutine = nil
local Unloaded = false

-- Check game structure
local events = ReplicatedStorage:FindFirstChild("events")
if not events then
    warn("ReplicatedStorage.events not found")
end
local resources = ReplicatedStorage:FindFirstChild("resources")
if not resources then
    warn("ReplicatedStorage.resources not found")
end

-- Get HumanoidRootPart
local function GetHumanoidRootPart()
    local char = player.Character or player.CharacterAdded:Wait()
    local hrp = char:WaitForChild("HumanoidRootPart", 5)
    if not hrp then
        warn("HumanoidRootPart not found")
    end
    return hrp
end

-- Linear interpolation for smooth movement
local function lerp(a, b, t)
    return a + (b - a) * t
end

-- Get smoothness value
local function getSmoothnessValue(isNormalMode)
    if isNormalMode then
        if smoothness == "Slow" then
            return 0.25
        elseif smoothness == "Fast" then
            return 0.8
        else -- Medium
            return 0.4
        end
    else
        if smoothness == "Slow" then
            return 0.15
        elseif smoothness == "Fast" then
            return 0.25
        else -- Medium
            return 0.2
        end
    end
end

-- ResetTool function
local function ResetTool()
    local char = player.Character
    if char and char.Humanoid then
        char.Humanoid:UnequipTools()
        print("Tool reset")
    else
        warn("Cannot reset tool: Character or Humanoid not found")
    end
end

-- Count reel instances in PlayerGui
local function CountReelInstances()
    local count = 0
    local gui = player:FindFirstChild("PlayerGui")
    if not gui then
        warn("PlayerGui not found")
        return count
    end
    for _, child in pairs(gui:GetChildren()) do
        if child.Name == "reel" then
            count = count + 1
        end
    end
    return count
end

-- Hookmetamethod for FireServer
local oldnamecall
local success, err = pcall(function()
    oldnamecall = hookmetamethod(game, "__namecall", function(...)
        if Unloaded then
            return oldnamecall(...)
        end
        if not checkcaller() then
            local Method = getnamecallmethod()
            local Args = {...}
            local self = table.remove(Args, 1)
            if Method == "FireServer" and self == ReplicatedStorage.events.reelfinished then
                if perfect_reel then
                    Args[1] = 100 -- Reel percentage
                    Args[2] = true -- If the reel was perfect
                    print("hookmetamethod: Adjusted reelfinished args to 100, true")
                else
                    print("hookmetamethod: reelfinished called with args:", Args[1], Args[2])
                end
                return oldnamecall(self, unpack(Args))
            end
        end
        return oldnamecall(...)
    end)
end)
if not success then
    warn("hookmetamethod not supported or failed: " .. err)
end

-- Auto Click (Auto Shake) Coroutine
local function StartAutoShake()
    if autoshake_connection then
        autoshake_connection:Disconnect()
        autoshake_connection = nil
        GuiService.SelectedObject = nil
        print("AutoShake connection stopped")
    end
    local function MountShakeUI(ShakeUI)
        local SafeZone = ShakeUI:WaitForChild("safezone", 5)
        if not SafeZone then
            warn("Unable to mount shake UI: safezone not found")
            return
        end
        print("AutoShake: Mounted shake UI")
        local Connection = SafeZone.ChildAdded:Connect(function(Child)
            if not Child:IsA("ImageButton") or not autoshake or Unloaded then
                return
            end
            print("AutoShake: Detected ImageButton in safezone")
            local Done = false
            task.spawn(function()
                repeat
                    RunService.Heartbeat:Wait()
                    if Child:IsA("ImageButton") then
                        local success, err = pcall(function()
                            Child.Selectable = true
                            GuiService.SelectedObject = Child
                        end)
                        if not success then
                            warn("AutoShake: Error selecting button: " .. err)
                        end
                    end
                until Done or not autoshake or Unloaded
            end)
            task.spawn(function()
                repeat
                    RunService.Heartbeat:Wait()
                until not Child or not Child:IsDescendantOf(SafeZone) or not autoshake or Unloaded
                Done = true
            end)
        end)
        task.spawn(function()
            repeat
                RunService.Heartbeat:Wait()
                if autoshake and not Unloaded and GuiService.SelectedObject and GuiService.SelectedObject:IsDescendantOf(SafeZone) then
                    local success, err = pcall(function()
                        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Return, false, game)
                        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Return, false, game)
                    end)
                    if not success then
                        warn("AutoShake: Error sending key event: " .. err)
                    else
                        print("AutoShake: Simulated Enter key press")
                    end
                end
            until not SafeZone:IsDescendantOf(player.PlayerGui) or not autoshake or Unloaded
            Connection:Disconnect()
            GuiService.SelectedObject = nil
            print("AutoShake: Stopped shake UI loop")
        end)
        autoshake_connection = Connection
    end
    autoshake_connection = player.PlayerGui.ChildAdded:Connect(function(Child)
        if Child.Name == "shakeui" and Child:IsA("ScreenGui") and autoshake and not Unloaded then
            print("AutoShake: Detected shakeui")
            MountShakeUI(Child)
        end
    end)
end

-- Auto Reel (Legit mode, continuous tracking)
local function StartAutoReel()
    if autoreel_running or normalmode_running then
        warn("AutoReel: Already running another reel mode")
        return
    end
    autoreel_running = true
    task.defer(function()
        while autoreel and not Unloaded do
            local gui = player:FindFirstChild("PlayerGui")
            local reel = gui and gui:FindFirstChild("reel")
            while autoreel and gui and not reel and not Unloaded do
                reel = gui:FindFirstChild("reel")
                task.wait(0.1)
            end
            if reel then
                local char = player.Character
                if char then
                    for _, tool in ipairs(char:GetChildren()) do
                        if tool:IsA("Tool") then
                            while autoreel and reel and reel.Parent and tool.Parent == char and not Unloaded do
                                local success, err = pcall(function()
                                    local bar = reel:FindFirstChild("bar")
                                    local fish = bar and bar:FindFirstChild("fish")
                                    local playerbar = bar and bar:FindFirstChild("playerbar")
                                    if fish and playerbar then
                                        local currentX = playerbar.Position.X.Scale
                                        local currentY = playerbar.Position.Y.Scale
                                        local lerpT = getSmoothnessValue(false)
                                        while autoreel and reel and reel.Parent and fish and playerbar and tool.Parent == char and not Unloaded do
                                            local targetX = fish.Position.X.Scale + math.random(-0.005, 0.005)
                                            local targetY = fish.Position.Y.Scale + math.random(-0.005, 0.005)
                                            currentX = lerp(currentX, targetX, lerpT)
                                            currentY = lerp(currentY, targetY, lerpT)
                                            playerbar.Position = UDim2.new(currentX, 0, currentY, 0)
                                            task.wait(0.01)
                                            bar = reel:FindFirstChild("bar")
                                            fish = bar and bar:FindFirstChild("fish")
                                            playerbar = bar and bar:FindFirstChild("playerbar")
                                        end
                                    else
                                        warn("AutoReel: Reel UI elements not found")
                                    end
                                end)
                                if not success then
                                    warn("AutoReel: Error: " .. err)
                                    autoreel = false
                                    autoreel_running = false
                                    return
                                end
                                task.wait(0.1)
                            end
                        end
                    end
                end
            else
                warn("AutoReel: Reel UI not found")
            end
            task.wait(0.1)
        end
        autoreel_running = false
    end)
end

-- Auto Reel Normal (continuous tracking)
local function StartAutoReelNormal()
    if normalmode_running or autoreel_running then
        warn("AutoReelNormal: Already running another reel mode")
        return
    end
    normalmode_running = true
    task.defer(function()
        while normalmode and not Unloaded do
            local gui = player:FindFirstChild("PlayerGui")
            local reel = gui and gui:FindFirstChild("reel")
            while normalmode and gui and not reel and not Unloaded do
                reel = gui:FindFirstChild("reel")
                task.wait(0.1)
            end
            if reel then
                local char = player.Character
                if char then
                    for _, tool in ipairs(char:GetChildren()) do
                        if tool:IsA("Tool") then
                            while normalmode and reel and reel.Parent and tool.Parent == char and not Unloaded do
                                local success, err = pcall(function()
                                    local bar = reel:FindFirstChild("bar")
                                    local fish = bar and bar:FindFirstChild("fish")
                                    local playerbar = bar and bar:FindFirstChild("playerbar")
                                    if fish and playerbar then
                                        local currentX = playerbar.Position.X.Scale
                                        local currentY = playerbar.Position.Y.Scale
                                        local lerpT = getSmoothnessValue(true)
                                        while normalmode and reel and reel.Parent and fish and playerbar and tool.Parent == char and not Unloaded do
                                            local targetX = fish.Position.X.Scale + math.random(-0.01, 0.01)
                                            local targetY = fish.Position.Y.Scale + math.random(-0.01, 0.01)
                                            currentX = lerp(currentX, targetX, lerpT)
                                            currentY = lerp(currentY, targetY, lerpT)
                                            playerbar.Position = UDim2.new(currentX, 0, currentY, 0)
                                            task.wait(0.01)
                                            bar = reel:FindFirstChild("bar")
                                            fish = bar and bar:FindFirstChild("fish")
                                            playerbar = bar and bar:FindFirstChild("playerbar")
                                        end
                                    else
                                        warn("AutoReelNormal: Reel UI elements not found")
                                    end
                                end)
                                if not success then
                                    warn("AutoReelNormal: Error: " .. err)
                                    normalmode = false
                                    normalmode_running = false
                                    return
                                end
                                task.wait(0.1)
                            end
                        end
                    end
                end
            else
                warn("AutoReelNormal: Reel UI not found")
            end
            task.wait(0.1)
        end
        normalmode_running = false
    end)
end

-- Auto Cast Coroutine
local function StartAutoCast()
    if autocast_coroutine then
        coroutine.close(autocast_coroutine)
        autocast_coroutine = nil
        print("AutoCast: Stopped previous coroutine")
    end
    autocast_coroutine = coroutine.create(function()
        local LastCastAttempt = 0
        while task.wait(0.5) do
            if not autocast or Unloaded then
                break
            end
            local success, err = pcall(function()
                local CurrentTool = player.Character and player.Character:FindFirstChildOfClass("Tool")
                if not CurrentTool then
                    warn("AutoCast: No tool equipped")
                    return
                end
                local Values = CurrentTool:FindFirstChild("values")
                if not Values then
                    warn("AutoCast: Tool values not found")
                    return
                end
                local Events = CurrentTool:FindFirstChild("events")
                if not Events then
                    warn("AutoCast: Tool events not found")
                    return
                end
                if Values:FindFirstChild("bite") and Values.bite.Value == true and Values.casted.Value == true then
                    if not player.PlayerGui:FindFirstChild("reel") and tick() - LastCastAttempt > 5 then
                        ResetTool()
                        print("AutoCast: Reset tool due to no reel UI")
                    end
                end
                if CountReelInstances() > 1 then
                    ResetTool()
                    for _, Child in pairs(player.PlayerGui:GetChildren()) do
                        if Child.Name == "reel" then
                            Child:Destroy()
                            print("AutoCast: Destroyed extra reel UI")
                        end
                    end
                end
                if Values.casted.Value == false then
                    LastCastAttempt = tick()
                    local AnimationFolder = ReplicatedStorage:WaitForChild("resources", 5):WaitForChild("animations", 5)
                    if not AnimationFolder then
                        warn("AutoCast: Animation folder not found")
                        return
                    end
                    local success, CastAnimation = pcall(function()
                        return player.Character:FindFirstChild("Humanoid"):LoadAnimation(AnimationFolder.fishing.throw)
                    end)
                    if not success then
                        warn("AutoCast: Failed to load throw animation: " .. CastAnimation)
                        return
                    end
                    CastAnimation.Priority = Enum.AnimationPriority.Action3
                    CastAnimation:Play()
                    print("AutoCast: Playing throw animation")
                    Events.cast:FireServer(100, 1)
                    print("AutoCast: Fired cast event")
                    CastAnimation.Stopped:Once(function()
                        CastAnimation:Destroy()
                        local success, WaitingAnimation = pcall(function()
                            return player.Character:FindFirstChild("Humanoid"):LoadAnimation(AnimationFolder.fishing.waiting)
                        end)
                        if not success then
                            warn("AutoCast: Failed to load waiting animation: " .. WaitingAnimation)
                            return
                        end
                        WaitingAnimation.Priority = Enum.AnimationPriority.Action3
                        WaitingAnimation:Play()
                        print("AutoCast: Playing waiting animation")
                        local UnequippedLoop, CastConnection
                        CastConnection = Values.casted.Changed:Once(function()
                            WaitingAnimation:Stop()
                            WaitingAnimation:Destroy()
                            coroutine.close(UnequippedLoop)
                            print("AutoCast: Stopped waiting animation")
                        end)
                        UnequippedLoop = coroutine.create(function()
                            repeat
                                task.wait()
                            until not player.Character:FindFirstChild(CurrentTool.Name) or not autocast or Unloaded
                            WaitingAnimation:Stop()
                            WaitingAnimation:Destroy()
                            CastConnection:Disconnect()
                            print("AutoCast: Unequipped tool or stopped")
                        end)
                        coroutine.resume(UnequippedLoop)
                    end)
                end
            end)
            if not success then
                warn("AutoCast: Error: " .. err)
                autocast = false
                break
            end
        end
   
