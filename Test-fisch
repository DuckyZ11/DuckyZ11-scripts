local success, redzlib = pcall(function()
    return loadstring(game:HttpGet("https://gist.githubusercontent.com/MjContiga1/54c07e52fc2aab8873b68d91a71d11c6/raw/fb4f1d6a7c89465f3b39bc00eeaf24b88f20/Redz%2520hub.lua"))()
end)
if not success then
    warn("Failed to load redzlib: " .. tostring(redzlib))
    return
end

-- Create window
local Window = redzlib:MakeWindow({
    Title = "Fisch Auto Reel",
    SubTitle = "Make For Lazy Fisher",
})

-- Check if the new image asset loads
local newImageId = "rbxassetid://135322148494327"
local fallbackImageId = "rbxassetid://139438145143663"
local imageId = newImageId
local success, err = pcall(function()
    game:GetService("ContentProvider"):PreloadAsync({newImageId})
end)
if not success then
    warn("Failed to load image " .. newImageId .. ": " .. tostring(err))
    imageId = fallbackImageId
end

-- Add minimize button (square with rounded corners)
Window:AddMinimizeButton({
    Button = { 
        Image = imageId, 
        BackgroundTransparency = 0,
        Size = UDim2.new(0, 44, 0, 44)
    },
    Corner = { CornerRadius = UDim.new(0, 8) }
})

-- Create tabs
local MainTab = Window:MakeTab({"Main", "rbxassetid://7733960981"})
local MiscTab = Window:MakeTab({"Misc", "rbxassetid://7733960981"})
local TeleportTab = Window:MakeTab({"Teleport", "rbxassetid://7733960981"})
local FastTab = Window:MakeTab({"Fast", "rbxassetid://7733960981"})
Window:SelectTab(MainTab)

-- Add sections
local MainSection = MainTab:AddSection({"Fisch Auto Reel"})
local PlayerSection = MiscTab:AddSection({"Player Settings"})
local Teleporting = TeleportTab:AddSection({"Teleport"})
local FastSection = FastTab:AddSection({"Fast Reel"})

-- Initialize services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local GuiService = game:GetService("GuiService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local player = Players.LocalPlayer

-- Initialize variables
local autoreel = false
local normalmode = false
local smoothness = "Medium"
local autoreel_fast = false
local instant_reel = false
local perfect_reel = false
local autocast = false
local autoshake = false
local autoreel_running = false
local normalmode_running = false
local autocast_coroutine = nil
local autoshake_connection = nil
local Unloaded = false

-- Get HumanoidRootPart
local function GetHumanoidRootPart()
    local char = player.Character or player.CharacterAdded:Wait()
    return char:WaitForChild("HumanoidRootPart")
end

-- Linear interpolation for smooth movement
local function lerp(a, b, t)
    return a + (b - a) * t
end

-- Get smoothness value (faster tracking for Auto Reel Normal)
local function getSmoothnessValue(isNormalMode)
    if isNormalMode then
        if smoothness == "Slow" then
            return 0.25
        elseif smoothness == "Fast" then
            return 0.8
        else -- Medium
            return 0.4
        end
    else
        if smoothness == "Slow" then
            return 0.15
        elseif smoothness == "Fast" then
            return 0.25
        else -- Medium
            return 0.2
        end
    end
end

-- ResetTool function
local function ResetTool()
    if player.Character and player.Character.Humanoid then
        player.Character.Humanoid:UnequipTools()
    end
end

-- Count reel instances in PlayerGui
local function CountReelInstances()
    local count = 0
    for _, child in pairs(player.PlayerGui:GetChildren()) do
        if child.Name == "reel" then
            count = count + 1
        end
    end
    return count
end

-- Hookmetamethod for FireServer
local oldnamecall
oldnamecall = hookmetamethod(game, "__namecall", function(...)
    if Unloaded then
        return oldnamecall(...)
    end
    if not checkcaller() then
        local Method = getnamecallmethod()
        local Args = {...}
        local self = table.remove(Args, 1)
        if Method == "FireServer" and self == ReplicatedStorage.events.reelfinished then
            if perfect_reel then
                Args[1] = 100 -- Reel percentage
                Args[2] = true -- If the reel was perfect
            end
            return oldnamecall(self, unpack(Args))
        end
    end
    return oldnamecall(...)
end)

-- Auto Click (Auto Shake) Coroutine
local function StartAutoShake()
    if autoshake_connection then
        autoshake_connection:Disconnect()
        autoshake_connection = nil
        GuiService.SelectedObject = nil
    end
    local function MountShakeUI(ShakeUI)
        local SafeZone = ShakeUI:WaitForChild("safezone", 5)
        if not SafeZone then
            warn("Unable to mount shake UI.")
            return
        end
        local Connection = SafeZone.ChildAdded:Connect(function(Child)
            if not Child:IsA("ImageButton") or not autoshake or Unloaded then
                return
            end
            local Done = false
            task.spawn(function()
                repeat
                    RunService.Heartbeat:Wait()
                    if Child:IsA("ImageButton") then
                        Child.Selectable = true
                        GuiService.SelectedObject = Child
                    end
                until Done or not autoshake or Unloaded
            end)
            task.spawn(function()
                repeat
                    RunService.Heartbeat:Wait()
                until not Child or not Child:IsDescendantOf(SafeZone) or not autoshake or Unloaded
                Done = true
            end)
        end)
        task.spawn(function()
            repeat
                RunService.Heartbeat:Wait()
                if autoshake and not Unloaded and GuiService.SelectedObject and GuiService.SelectedObject:IsDescendantOf(SafeZone) then
                    VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Return, false, game)
                    VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Return, false, game)
                end
            until not SafeZone:IsDescendantOf(player.PlayerGui) or not autoshake or Unloaded
            Connection:Disconnect()
            GuiService.SelectedObject = nil
        end)
        autoshake_connection = Connection
    end
    autoshake_connection = player.PlayerGui.ChildAdded:Connect(function(Child)
        if Child.Name == "shakeui" and Child:IsA("ScreenGui") and autoshake and not Unloaded then
            MountShakeUI(Child)
        end
    end)
end

-- Cleanup on script unload
game:BindToClose(function()
    Unloaded = true
    if autocast_coroutine then
        coroutine.close(autocast_coroutine)
        autocast_coroutine = nil
    end
    if autoshake_connection then
        autoshake_connection:Disconnect()
        autoshake_connection = nil
        GuiService.SelectedObject = nil
    end
end)

-- Auto Reel (Legit mode, continuous tracking)
local function StartAutoReel()
    if autoreel_running or normalmode_running then return end
    autoreel_running = true
    task.defer(function()
        while autoreel and not Unloaded do
            local gui = player:FindFirstChild("PlayerGui")
            local reel = gui and gui:FindFirstChild("reel")
            while autoreel and gui and not reel and not Unloaded do
                reel = gui:FindFirstChild("reel")
                task.wait(0.1)
            end
            if reel then
                local char = player.Character
                if char then
                    for _, tool in ipairs(char:GetChildren()) do
                        if tool:IsA("Tool") then
                            while autoreel and reel and reel.Parent and tool.Parent == char and not Unloaded do
                                local success, err = pcall(function()
                                    local bar = reel:FindFirstChild("bar")
                                    local fish = bar and bar:FindFirstChild("fish")
                                    local playerbar = bar and bar:FindFirstChild("playerbar")
                                    if fish and playerbar then
                                        local currentX = playerbar.Position.X.Scale
                                        local currentY = playerbar.Position.Y.Scale
                                        local lerpT = getSmoothnessValue(false)
                                        while autoreel and reel and reel.Parent and fish and playerbar and tool.Parent == char and not Unloaded do
                                            local targetX = fish.Position.X.Scale + math.random(-0.005, 0.005)
                                            local targetY = fish.Position.Y.Scale + math.random(-0.005, 0.005)
                                            currentX = lerp(currentX, targetX, lerpT)
                                            currentY = lerp(currentY, targetY, lerpT)
                                            playerbar.Position = UDim2.new(currentX, 0, currentY, 0)
                                            task.wait(0.01)
                                            bar = reel:FindFirstChild("bar")
                                            fish = bar and bar:FindFirstChild("fish")
                                            playerbar = bar and bar:FindFirstChild("playerbar")
                                        end
                                    else
                                        warn("Reel UI elements not found")
                                    end
                                end)
                                if not success then
                                    warn("Error in AutoReel: " .. err)
                                    autoreel = false
                                    return
                                end
                                task.wait(0.1)
                            end
                        end
                    end
                end
            else
                warn("Reel UI not found")
            end
            task.wait(0.1)
        end
        autoreel_running = false
    end)
end

-- Auto Reel Normal (continuous tracking)
local function StartAutoReelNormal()
    if normalmode_running or autoreel_running then return end
    normalmode_running = true
    task.defer(function()
        while normalmode and not Unloaded do
            local gui = player:FindFirstChild("PlayerGui")
            local reel = gui and gui:FindFirstChild("reel")
            while normalmode and gui and not reel and not Unloaded do
                reel = gui:FindFirstChild("reel")
                task.wait(0.1)
            end
            if reel then
                local char = player.Character
                if char then
                    for _, tool in ipairs(char:GetChildren()) do
                        if tool:IsA("Tool") then
                            while normalmode and reel and reel.Parent and tool.Parent == char and not Unloaded do
                                local success, err = pcall(function()
                                    local bar = reel:FindFirstChild("bar")
                                    local fish = bar and bar:FindFirstChild("fish")
                                    local playerbar = bar and bar:FindFirstChild("playerbar")
                                    if fish and playerbar then
                                        local currentX = playerbar.Position.X.Scale
                                        local currentY = playerbar.Position.Y.Scale
                                        local lerpT = getSmoothnessValue(true)
                                        while normalmode and reel and reel.Parent and fish and playerbar and tool.Parent == char and not Unloaded do
                                            local targetX = fish.Position.X.Scale + math.random(-0.01, 0.01)
                                            local targetY = fish.Position.Y.Scale + math.random(-0.01, 0.01)
                                            currentX = lerp(currentX, targetX, lerpT)
                                            currentY = lerp(currentY, targetY, lerpT)
                                            playerbar.Position = UDim2.new(currentX, 0, currentY, 0)
                                            task.wait(0.01)
                                            bar = reel:FindFirstChild("bar")
                                            fish = bar and bar:FindFirstChild("fish")
                                            playerbar = bar and bar:FindFirstChild("playerbar")
                                        end
                                    else
                                        warn("Reel UI elements not found")
                                    end
                                end)
                                if not success then
                                    warn("Error in AutoReelNormal: " .. err)
                                    normalmode = false
                                    return
                                end
                                task.wait(0.1)
                            end
                        end
                    end
                end
            else
                warn("Reel UI not found")
            end
            task.wait(0.1)
        end
        normalmode_running = false
    end)
end

-- Auto Cast Coroutine
local function StartAutoCast()
    if autocast_coroutine then
        coroutine.close(autocast_coroutine)
        autocast_coroutine = nil
    end
    autocast_coroutine = coroutine.create(function()
        local LastCastAttempt = 0
        while task.wait(0.5) do
            if not autocast or Unloaded then
                break
            end
            local success, err = pcall(function()
                local CurrentTool = player.Character and player.Character:FindFirstChildOfClass("Tool")
                if not CurrentTool then
                    return
                end
                local Values = CurrentTool:FindFirstChild("values")
                if CurrentTool and Values then
                    local Events = CurrentTool:FindFirstChild("events")
                    if Values:FindFirstChild("bite") and Values.bite.Value == true and Values.casted.Value == true then
                        if not player.PlayerGui:FindFirstChild("reel") and tick() - LastCastAttempt > 5 then
                            ResetTool()
                        end
                    end
                    if CountReelInstances() > 1 then
                        ResetTool()
                        for _, Child in pairs(player.PlayerGui:GetChildren()) do
                            if Child.Name == "reel" then
                                Child:Destroy()
                            end
                        end
                    end
                    if Values.casted.Value == false then
                        LastCastAttempt = tick()
                        local AnimationFolder = ReplicatedStorage:WaitForChild("resources"):WaitForChild("animations")
                        local CastAnimation = player.Character:FindFirstChild("Humanoid"):LoadAnimation(AnimationFolder.fishing.throw)
                        CastAnimation.Priority = Enum.AnimationPriority.Action3
                        CastAnimation:Play()
                        Events.cast:FireServer(100, 1)
                        CastAnimation.Stopped:Once(function()
                            CastAnimation:Destroy()
                            local WaitingAnimation = player.Character:FindFirstChild("Humanoid"):LoadAnimation(AnimationFolder.fishing.waiting)
                            WaitingAnimation.Priority = Enum.AnimationPriority.Action3
                            WaitingAnimation:Play()
                            local UnequippedLoop, CastConnection
                            CastConnection = Values.casted.Changed:Once(function()
                                WaitingAnimation:Stop()
                                WaitingAnimation:Destroy()
                                coroutine.close(UnequippedLoop)
                            end)
                            UnequippedLoop = coroutine.create(function()
                                repeat
                                    task.wait()
                                until not player.Character:FindFirstChild(CurrentTool.Name) or not autocast or Unloaded
                                WaitingAnimation:Stop()
                                WaitingAnimation:Destroy()
                                CastConnection:Disconnect()
                            end)
                            coroutine.resume(UnequippedLoop)
                        end)
                    end
                end
            end)
            if not success then
                warn("Error in AutoCast: " .. err)
                autocast = false
                break
            end
        end
    end)
    coroutine.resume(autocast_coroutine)
end

-- Fast Reel Coroutine
local AutoReelCoroutine = coroutine.create(function()
    while true do
        if Unloaded then break end
        RunService.RenderStepped:Wait()
        local ReelUI = player.PlayerGui:FindFirstChild("reel")
        if not ReelUI then
            continue
        end
        if instant_reel then
            local Bar = ReelUI:FindFirstChild("bar")
            if Bar then
                local ReelScript = Bar:FindFirstChild("reel")
                if ReelScript and ReelScript.Enabled == true then
                    ReplicatedStorage.events.reelfinished:FireServer(100, perfect_reel)
                end
            end
        elseif autoreel_fast then
            local Bar = ReelUI:FindFirstChild("bar")
            if not Bar then
                continue
            end
            local PlayerBar = Bar:FindFirstChild("playerbar")
            local TargetBar = Bar:FindFirstChild("fish")
            if PlayerBar and TargetBar then
                while Bar and ReelUI:IsDescendantOf(player.PlayerGui) and autoreel_fast and not Unloaded do
                    RunService.RenderStepped:Wait()
                    local UnfilteredTargetPosition = PlayerBar.Position:Lerp(TargetBar.Position, 0.7)
                    local TargetPosition = UDim2.fromScale(
                        math.clamp(UnfilteredTargetPosition.X.Scale, 0.15, 0.85),
                        UnfilteredTargetPosition.Y.Scale
                    )
                    PlayerBar.Position = TargetPosition
                end
            end
        end
    end
end)
coroutine.resume(AutoReelCoroutine)

-- Auto Reel Toggle (Legit mode)
MainSection:AddToggle({
    Name = "Auto Reel (Legit)",
    Flag = "AutoReel",
    Default = false,
    Callback = function(state)
        autoreel = state
        if state then
            -- Disable other reel modes to prevent conflicts
            normalmode = false
            autoreel_fast = false
            instant_reel = false
            normalmode_running = false
            local success, err = pcall(StartAutoReel)
            if not success then
                warn("Error in StartAutoReel: " .. err)
                autoreel = false
            end
        else
            autoreel_running = false
        end
    end
})

-- Auto Reel Normal Toggle
MainSection:AddToggle({
    Name = "Auto Reel (Normal)",
    Flag = "NormalMode",
    Default = false,
    Callback = function(state)
        normalmode = state
        if state then
            -- Disable other reel modes to prevent conflicts
            autoreel = false
            autoreel_fast = false
            instant_reel = false
            autoreel_running = false
            local success, err = pcall(StartAutoReelNormal)
            if not success then
                warn("Error in StartAutoReelNormal: " .. err)
                normalmode = false
            end
        else
            normalmode_running = false
        end
    end
})

-- Smoothness Dropdown
MainSection:AddDropdown
